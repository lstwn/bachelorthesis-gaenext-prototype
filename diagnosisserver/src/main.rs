mod actor;
use actor::DiagnosisServerState;
use anyhow::Result;
use exposurelib::args::{crate_authors, crate_description, crate_name, crate_version, Args};
use exposurelib::config::DiagnosisServerConfig;
use exposurelib::diagnosis_server_state::Chunk;
use exposurelib::logger;
use exposurelib::primitives::ComputationId;
use exposurelib::rpcs::{
    BlacklistUploadParams, DiagnosisServer, DownloadParams, GreylistUploadParams,
};
use futures::{future, prelude::*};
use std::fs;
use std::net::SocketAddr;
use std::sync::Arc;
use tarpc::{
    context::Context,
    server::{self, Channel},
    tokio_serde::formats,
};

#[tokio::main]
async fn main() -> Result<()> {
    let args = Args::new(
        crate_name!(),
        crate_version!(),
        crate_authors!(),
        crate_description!(),
    );

    let config = fs::read_to_string(&args.config_file_path)?;
    let config: DiagnosisServerConfig = serde_yaml::from_str(&config)?;
    let config = Arc::new(config);

    logger::setup_logger(&args.log_file_path, args.log_level, String::from("ds"));

    let state = DiagnosisServerState::new(Arc::clone(&config));

    logger::trace!("Diagnosis Server listening on {}", config.endpoint);

    let mut listener =
        tarpc::serde_transport::tcp::listen(&config.endpoint, formats::Json::default).await?;
    listener.config_mut().max_frame_length(usize::MAX);
    listener
        // Ignore accept errors
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // Function serve() is generated by the service attribute
        // It takes as input any type implementing the generated service trait
        .map(|channel| {
            let server =
                ConnectionHandler::new(channel.as_ref().peer_addr().unwrap(), Arc::clone(&state));
            channel.requests().execute(server.serve())
        })
        // Max 30 channels
        .buffer_unordered(30)
        .for_each(|_| async {})
        .await;

    Ok(())
}

#[derive(Clone)]
pub struct ConnectionHandler {
    peer_addr: SocketAddr,
    state: Arc<DiagnosisServerState>,
}

impl ConnectionHandler {
    fn new(peer_addr: SocketAddr, state: Arc<DiagnosisServerState>) -> Self {
        Self { peer_addr, state }
    }
}

#[tarpc::server]
impl DiagnosisServer for ConnectionHandler {
    async fn hello(self, _context: Context, world: String) -> String {
        format!(
            "Hi {} at {:?} from Diagnosis Server!",
            world, self.peer_addr
        )
    }
    async fn blacklist_upload(
        self,
        _context: Context,
        params: BlacklistUploadParams,
    ) -> ComputationId {
        logger::debug!(
            "New blacklist_upload() RPC from {:?} with context {:?} and params {:?}",
            self.peer_addr,
            _context,
            params
        );
        self.state.add_to_blacklist(&params).await
    }
    async fn greylist_upload(self, context: Context, params: GreylistUploadParams) -> () {
        logger::debug!(
            "New greylist_upload() RPC from {:?} with context {:?} and params {:?}",
            self.peer_addr,
            context,
            params
        );
        self.state.add_to_greylist(&params).await
    }
    async fn download(self, context: Context, params: DownloadParams) -> Vec<Chunk> {
        logger::debug!(
            "New download() RPC from {:?} with context {:?} and params {:?}",
            self.peer_addr,
            context,
            params
        );
        self.state.request_chunks(&params).await
    }
}
