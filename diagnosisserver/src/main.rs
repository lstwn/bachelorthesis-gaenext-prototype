use anyhow::Result;
use exposurelib::args::{crate_authors, crate_description, crate_name, crate_version, Args};
use exposurelib::config::DiagnosisServerConfig;
use exposurelib::diagnosis_server_state::Chunks;
use exposurelib::logger;
use exposurelib::primitives::ComputationId;
use exposurelib::rpcs::{
    BlacklistUploadParams, DiagnosisServer, DownloadParams, GreylistUploadParams,
};
use futures::{future, prelude::*};
use std::fs;
use tarpc::{
    context::{self, Context},
    server::{self, Channel, Incoming},
    tokio_serde::formats,
};

#[tokio::main]
async fn main() -> Result<()> {
    let args = Args::new(
        crate_name!(),
        crate_version!(),
        crate_authors!(),
        crate_description!(),
    );
    let config = fs::read_to_string(&args.config_file_path)?;
    let config: DiagnosisServerConfig = serde_yaml::from_str(&config)?;
    logger::setup_logger(&args.log_file_path, args.log_level, String::from("ds"));
    logger::trace!("Diagnosis Server started");

    let mut listener =
        tarpc::serde_transport::tcp::listen(&config.endpoint, formats::Json::default).await?;
    listener.config_mut().max_frame_length(usize::MAX);
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        // .max_channels_per_key(1, |t| t.as_ref().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            let server = Server::new(channel.as_ref().peer_addr().unwrap());
            channel.requests().execute(server.serve())
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {})
        .await;

    Ok(())
    // let listener = TcpListener::bind(&config.endpoint).await?;

    // loop {
    //     match listener.accept().await {
    //         Ok((socket, peer_addr)) => {
    //             logger::info!("Accepted new client {}", peer_addr);
    //         }
    //         Err(e) => logger::warn!("Could not accept client {:?}", e),
    //     }
    // }
}

use std::net::SocketAddr;

#[derive(Clone)]
pub struct Server {
    peer_addr: SocketAddr,
}

impl Server {
    fn new(peer_addr: SocketAddr) -> Self {
        Self { peer_addr }
    }
}

#[tarpc::server]
impl DiagnosisServer for Server {
    async fn hello(self, _context: Context, world: String) -> String {
        format!(
            "Hi {} at {:?} from Diagnosis Server!",
            world, self.peer_addr
        )
    }
    async fn blacklist_upload(
        self,
        _context: Context,
        params: BlacklistUploadParams,
    ) -> ComputationId {
        todo!("");
    }
    async fn greylist_upload(self, _context: Context, params: GreylistUploadParams) -> () {
        todo!("");
    }
    async fn download(self, _context: Context, params: DownloadParams) -> Chunks {
        todo!("");
    }
}
